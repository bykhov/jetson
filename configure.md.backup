# Jetson configuration (Native, without Docker container)

## Wi-Fi

For some unknown reason, Wi-Fi does not work out of the box.
Steps:

1. Reboot:
   `sudo reboot`
2. Operate wifi (from [Adding WiFi to the NVIDIA Jetson](https://learn.sparkfun.com/tutorials/adding-wifi-to-the-nvidia-jetson/all)):

   ```
   nmcli d           # list devices (optional)
   nmcli r wifi on   # verify that wifi is on (optional)
   nmcli d wifi list # list available networks (optional)
   sudo nmcli d wifi connect [SSID] password [PASSWORD] # connect to network
   ```
<!--- sudo nmcli d wifi connect SCE password samishamoon?! # connect to network --->
3. Check and install updates (takes some time):

   ```
   sudo apt-get update && sudo apt-get upgrade
   sudo reboot  # reboot because of firmware/kernel update
   ```
4. Fix clock to the maximum speed (step 4 [here](https://pyimagesearch.com/2020/03/25/how-to-configure-your-nvidia-jetson-nano-for-computer-vision-and-deep-learning/)):

   ```
   sudo nvpmodel -m 0
   sudo jetson_clocks   
   ```
5. Nice [nano](https://www.nano-editor.org/) editor: `sudo apt-get install nano`

   <!--- 2. [Git](https://git-scm.com/): `sudo apt-get install git` --->
6. Python basics:

   ```
   sudo apt-get install python3-pip
   ```
7. [jtop](https://rnext.it/jetson_stats/) command:
   `sudo -H pip3 install jetson-stats`

## TensorFlow 2

1. Install TensorFlow 2.6.2
   (from [Jetson documentation](https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html),
   [jetbot script](https://github.com/NVIDIA-AI-IOT/jetbot/blob/master/scripts/create-sdcard-image-from-scratch.sh)
   and [jkjung-avt blog](https://jkjung-avt.github.io/jetpack-4.6/)):
   ```bash
   sudo apt install -y libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev \
                     zip libjpeg8-dev liblapack-dev libblas-dev gfortran
   sudo pip3 install --upgrade pip setuptools wheel
   sudo pip3 install -U pip testresources
   sudo pip3 install -U --no-deps numpy==1.19.4 future==0.18.2 mock==3.0.5 \
     keras_preprocessing==1.1.2 keras_applications==1.0.8 \
     gast==0.4.0 protobuf pybind11 cython pkgconfig
   sudo env H5PY_SETUP_REQUIRES=0 pip3 install -U h5py==3.1.0
   sudo pip3 install --pre --extra-index-url \
     https://developer.download.nvidia.com/compute/redist/jp/v46 \
     tensorflow>=2
   ```
2. Validate installation:
   ```
   TF_CPP_MIN_LOG_LEVEL=3 python3 -c "import tensorflow as tf; tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR); print('tensorflow version: %s' % tf.__version__); print('tensorflow.test.is_built_with_cuda(): %s' % tf.test.is_built_with_cuda()); print('tensorflow.test.is_gpu_available(): %s' % tf.test.is_gpu_available(cuda_only=False, min_cuda_compute_capability=None))"
   ```

## Jupiter

### Jupiter Notebook

1. Install Jupiter Notebook (from [here](https://bibsian.github.io/posts/jupyter-setup/))
   ```
   sudo apt install -y libfreetype6-dev pkg-config libpng-dev jq  
   sudo pip3 install matplotlib 
   sudo pip3 install jupyter
   ```
2. Configure Jupyter:
   ```
   jupyter notebook --generate-config
   jupyter notebook password # enter password on promt
   JUPYTER_CONFIG_FILE="$HOME/.jupyter/jupyter_notebook_config.py"
   # Configuration string
   JUPYTER_CONFIG_UPDATE=\
   "c = get_config()

   # Inline plotting
   c.IPKernelApp.pylab = 'inline'

   # Notebook config
   c.NotebookApp.ip = '0.0.0.0'
   c.NotebookApp.open_browser = False  #so that the ipython notebook does not opens up a browser by default
   # Set the port to 8888
   c.NotebookApp.port = 8888

   # Configuration file for jupyter-notebook.
   c.Notebook.allow_origin='*'

   c.InteractiveShellApp.extensions = ['autoreload']
   c.InteractiveShellApp.exec_lines = ['%autoreload 2']"

   # Concat config string with original file and update config file
   sudo printf '%s\n%s\n' "$JUPYTER_CONFIG_UPDATE" "$(sudo cat $JUPYTER_CONFIG_FILE)" > $JUPYTER_CONFIG_FILE
   ```
3. Run Jupiter Notebook:
   ```
   jupyter notebook --ip=0.0.0.0
   ```

### Jupiter Lab

1. Dependencies:
   ```
   sudo apt install -y libffi-dev libssl1.0-dev
   sudo apt install -y curl
   curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - # ignore the warning and patiently
   ```
2. Install Jupiter Lab:
   ```
   sudo pip3 install jupyterlab
   sudo pip3 install lckr-jupyterlab-variableinspector # variable inspector
   ```
3. (optional) Interactive plots functionality with [ipympl](https://matplotlib.org/ipympl/)
   to be used with `%matplotlib ipympl` magic command:
   ```bash
   sudo pip install ipympl
   ```
4. Configure Jupyter:
   ```
   jupyter lab --generate-config
   jupyter notebook password # enter password on promt
   lab="$HOME/.jupyter/jupyter_lab_config.py"
   # Configuration string
   JUPYTER_CONFIG_UPDATE=\
   "c = get_config()

   # Inline plotting
   c.IPKernelApp.pylab = 'inline'

   # Notebook config
   c.NotebookApp.ip = '0.0.0.0'
   c.NotebookApp.open_browser = False  #so that the ipython notebook does not opens up a browser by default
   # Set the port to 8888
   c.NotebookApp.port = 8888

   # Configuration file for jupyter-notebook.
   c.Notebook.allow_origin='*'

   c.InteractiveShellApp.extensions = ['autoreload']
   c.InteractiveShellApp.exec_lines = ['%autoreload 2']"
   # Concat config string with original file and update config file
   sudo printf '%s\n%s\n' "$JUPYTER_CONFIG_UPDATE" "$(sudo cat $JUPYTER_CONFIG_FILE)" > $JUPYTER_CONFIG_FILE
   ```
1. Run Jupiter lab:
   ```bash
   jupyter lab --ip=0.0.0.0  
   ```

## Video


### IDE

The convenient work with Jupiter is to use IDE with remote Jupyter server or remote ssh Python server capabilities, e.g. [Dataspell](https://www.jetbrains.com/help/dataspell/configuring-jupyter-notebook.html#remote).
It enables tools like Copilot. Unfortunately, I did not succeed to use a variable inspector.

### Final Remark
Itâ€™s a good idea to reboot after the installation: `sudo reboot`

## Notes
There are many interesting Jetson posts, I have found them (unfortunately, yet) unuseful:
* [Cmake](https://forums.developer.nvidia.com/t/how-does-jetson-nono-update-cmake-to-3-18/182786/4) update - never
   encountered the problem (also mentioned in some places, such as [YoloV4 Jetson Nano](https://github.com/Qengineering/YoloV4-ncnn-Jetson-Nano))
* [Jetson Nano DNN image](https://github.com/Qengineering/Jetson-Nano-image) - did not succeed to run Jupyter
* [OpenCV upgrage](https://github.com/Qengineering/Install-OpenCV-Jetson-Nano) - after install it altered some other packages